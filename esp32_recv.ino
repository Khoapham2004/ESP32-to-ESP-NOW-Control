#include <esp_now.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ESP32Servo.h>
#include <Adafruit_NeoPixel.h>

//  C·∫•u h√¨nh ch√¢n
const int steeringPin = 15;  // Ch√¢n ƒëi·ªÅu khi·ªÉn servo
const int RPWM = 12;         // ƒêi·ªÅu h∆∞·ªõng motor ph·∫£i
const int LPWM = 13;         // ƒêi·ªÅu h∆∞·ªõng motor tr√°i
const int EN_PIN = 2;        // K√≠ch ho·∫°t motor (R_EN & L_EN)
const int RGB_Front = 5;
const int RGB_Back = 18;
#define NUM_LEDS 8
bool headlightState = false;  // M·∫∑c ƒë·ªãnh t·∫Øt

Adafruit_NeoPixel strip1(NUM_LEDS, RGB_Front, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel strip2(NUM_LEDS, RGB_Back, NEO_GRB + NEO_KHZ800);

//  C·∫•u h√¨nh PWM
const int MotorPWMFreq = 1000;  // T·∫ßn s·ªë PWM cho motor
const int ServoPWMFreq = 50;    // T·∫ßn s·ªë PWM cho servo
const int PWMResolution = 8;    // 8-bit PWM (0-255)

//  Timeout n·∫øu m·∫•t t√≠n hi·ªáu
#define SIGNAL_TIMEOUT 1000  
unsigned long lastRecvTime = 0;

//  C·∫•u tr√∫c d·ªØ li·ªáu nh·∫≠n (KH√îNG S·ª¨A)
typedef struct {
 uint8_t header;  // Byte ƒë·∫ßu (0xAA)
  uint8_t ly;
  uint8_t rx;
  uint8_t ry;
  uint8_t pot;
  bool b1, b2, b3, b4, b5, b6, js1, js2;
  uint8_t footer;  // Byte cu·ªëi (0x55)
} DataPacket;

DataPacket receiverData;

// X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n t·ª´ ESP-NOW
void OnDataRecv(const esp_now_recv_info_t* info, const uint8_t* incomingData, int len) {
  if (len == sizeof(DataPacket)) {  // Ki·ªÉm tra k√≠ch th∆∞·ªõc g√≥i tin
    memcpy(&receiverData, incomingData, sizeof(receiverData));

    // Ki·ªÉm tra header v√† footer ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu h·ª£p l·ªá
    if (receiverData.header == 0x4E && receiverData.footer == 0x41) {
      Serial.print("Received - LY: "); Serial.print(receiverData.ly);
      Serial.print(" RX: "); Serial.print(receiverData.rx);
      Serial.print(" Pot: "); Serial.println(receiverData.pot);

      int steering = map(receiverData.rx, 0, 254, 0, 180);
      setServoAngle(steering);
      controlMotor();
      lastRecvTime = millis();

      // Chuy·ªÉn tr·∫°ng th√°i ƒë√®n pha khi nh·∫•n b6
      static bool lastB6State = false;
      if (receiverData.b6 && !lastB6State) {  // Ch·ªâ k√≠ch ho·∫°t khi b6 chuy·ªÉn t·ª´ 0 -> 1
        headlightState = !headlightState; // ƒê·∫£o tr·∫°ng th√°i
        Serial.print("Headlights: "); Serial.println(headlightState ? "ON" : "OFF");
        turnOnHeadlight(headlightState);
      }
      lastB6State = receiverData.b6;

      // Xi-nhan tr√°i (B5)
      turnSignalLeft(receiverData.b5);

      // Xi-nhan ph·∫£i (B4)
      turnSignalRight(receiverData.b4);
    } else {
      Serial.println("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! (Sai header/footer)");
    }
  } else {
    Serial.println("‚ö†Ô∏è G√≥i tin kh√¥ng ƒë√∫ng k√≠ch th∆∞·ªõc!");
  }
}


void turnOnHeadlight(bool state) {
  if (state) {
    allWhite(strip1);  // B·∫≠t ƒë√®n tr∆∞·ªõc
    allWhite(strip2);  // B·∫≠t ƒë√®n sau
  } else {
    strip1.clear();  // T·∫Øt ƒë√®n tr∆∞·ªõc
    strip2.clear();  // T·∫Øt ƒë√®n sau
    strip1.show();
    strip2.show();
  }
}

void turnSignalLeft(bool state) {
  if (state) {
    turnSignal(strip1);  // Xi-nhan tr√°i (tr∆∞·ªõc)
    turnSignal(strip2);  // Xi-nhan tr√°i (sau)
  } else {
    strip1.clear();
    strip2.clear();
    strip1.show();
    strip2.show();
  }
}

void turnSignalRight(bool state) {
  if (state) {
    turnSignal(strip1);  // Xi-nhan ph·∫£i (tr∆∞·ªõc)
    turnSignal(strip2);  // Xi-nhan ph·∫£i (sau)
  } else {
    strip1.clear();
    strip2.clear();
    strip1.show();
    strip2.show();
  }
}


// ƒêi·ªÅu khi·ªÉn motor BTS7960
void controlMotor() {
  int motorSpeed = map(receiverData.ly, 0, 254, -255, 255);
  int pwmSpeed = map(receiverData.pot, 254, 0, 0, 255);
  int steering = map(constrain(receiverData.rx + (127 - 112), 0, 254), 0, 254, -10, 180);

  Serial.print("Pot: "); Serial.print(receiverData.pot);
  Serial.print(" | Servo: "); Serial.print(steering);
  Serial.print(" | Motor Speed: "); Serial.print(motorSpeed);
  Serial.print(" | PWM: "); Serial.print(pwmSpeed);
  Serial.print(" | State: ");

  if (motorSpeed > 50) {
    Serial.println("Forward");
    goAhead(pwmSpeed);
  } else if (motorSpeed < -50) {
    Serial.println("Backward");
    goBack(pwmSpeed);
  } else {
    Serial.println("Stopped");
    stopMotor();
  }
}

//  Ch·∫°y t·ªõi
void goAhead(int MotorSpeed) {
  digitalWrite(EN_PIN, HIGH);    // K√≠ch ho·∫°t motor
  ledcWrite(RPWM, MotorSpeed);   // PWM cho ti·∫øn
  ledcWrite(LPWM, 0);            // ƒê·∫∑t l√πi v·ªÅ 0
}

//  Ch·∫°y l√πi
void goBack(int MotorSpeed) {
  digitalWrite(EN_PIN, HIGH);    // K√≠ch ho·∫°t motor
  ledcWrite(RPWM, 100);            // ƒê·∫∑t ti·∫øn v·ªÅ 0
  ledcWrite(LPWM, 255);   // PWM cho l√πi
}

//  D·ª´ng motor
void stopMotor() {
  digitalWrite(EN_PIN, LOW);     // T·∫Øt motor
  ledcWrite(RPWM, 0);
  ledcWrite(LPWM, 0);
}

// ƒêi·ªÅu khi·ªÉn g√≥c servo (0 - 180 ƒë·ªô)
void setServoAngle(int angle) {
  int duty = map(angle, 0, 180, 1638, 8192); // Map servo PWM (16-bit)
  ledcWrite(steeringPin, duty); // Ghi tr·ª±c ti·∫øp v√†o ch√¢n steeringPin
}
void allWhite(Adafruit_NeoPixel &strip) {
    for (int i = 0; i < NUM_LEDS; i++) {
        strip.setPixelColor(i, strip.Color(255, 255, 255));  
    }
    strip.show();
}
// üõ† Thi·∫øt l·∫≠p ch√¢n & PWM
void setUpPinModes() {
  pinMode(EN_PIN, OUTPUT);
  pinMode(RPWM, OUTPUT);
  pinMode(LPWM, OUTPUT);

  // S·ª≠ d·ª•ng ledcAttach thay cho ledcSetup v√† ledcAttachPin
  ledcAttach(RPWM, MotorPWMFreq, PWMResolution);  // PWM cho RPWM
  ledcAttach(LPWM, MotorPWMFreq, PWMResolution);  // PWM cho LPWM
  ledcAttach(steeringPin, ServoPWMFreq, 16);      // PWM cho Servo (16-bit)

  // ƒê∆∞a servo v·ªÅ gi·ªØa khi kh·ªüi ƒë·ªông
  setServoAngle(90);
}
void turnSignal(Adafruit_NeoPixel &strip) {
    for (int i = 0; i < NUM_LEDS; i++) {
        strip.setPixelColor(i, strip.Color(255, 255, 0));  // M√†u v√†ng (255,255,0)
        strip.show();
        delay(100);
    }
    delay(200);  // Gi·ªØ s√°ng m·ªôt ch√∫t
    strip.clear();  
    strip.show();
    delay(200);
}

void setup() {
  Serial.begin(115200);
  setUpPinModes();
  strip1.begin();  
  strip2.begin();  
  strip1.setBrightness(255);  // ƒê·ªô s√°ng t·ªëi ƒëa
  strip2.setBrightness(255);  
  strip1.show();  
  strip2.show();  
  
  WiFi.mode(WIFI_STA);
  //esp_wifi_set_max_tx_power(78);  // Gi√° tr·ªã 78 t∆∞∆°ng ƒë∆∞∆°ng ~20.5 dBm
  WiFi.setSleep(false);  // T·∫Øt ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng WiFi
  esp_wifi_set_max_tx_power(84);  // C√¥ng su·∫•t ph√°t WiFi t·ªëi ƒëa
  setCpuFrequencyMhz(240);  // Ch·∫°y CPU ·ªü t·ªëc ƒë·ªô cao nh·∫•t
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_set_wake_window(65535);  // Gi·ªØ ESP-NOW lu√¥n ho·∫°t ƒë·ªông
  //esp_now_set_peer_rate(WIFI_PHY_RATE_54M);  // T·ªëc ƒë·ªô truy·ªÅn cao nh·∫•t
  esp_now_register_recv_cb(OnDataRecv);
  }

void loop() {
  if (millis() - lastRecvTime > SIGNAL_TIMEOUT) {
    setServoAngle(90); // Tr·∫£ v·ªÅ gi·ªØa
    stopMotor();
    Serial.println("No signal. Motor stopped, steering centered.");
  }
}
